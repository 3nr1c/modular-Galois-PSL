
# q-expansion of newform 31.5.b.b, downloaded from the LMFDB on 05 February 2022.

# We generate the q-expansion using the Hecke eigenvalues a_p at the primes.
# Each a_p is given as a linear combination
# of the following basis for the coefficient ring.
# To create the q-expansion as a power series, type "qexp = make_data()"

def make_data():
    from sage.all import prod, floor, prime_powers, gcd, QQ, primes_first_n, next_prime, RR

    def discrete_log(elts, gens, mod):
        # algorithm 2.2, page 16 of https://arxiv.org/abs/0903.2785
        def table_gens(gens, mod):
            T = [1]
            n = len(gens)
            r = [None]*n
            s = [None]*n
            for i in range(n):
                beta = gens[i]
                r[i] = 1
                N = len(T)
                while beta not in T:
                    for Tj in T[:N]:
                        T.append((beta*Tj) % mod)
                    beta = (beta*gens[i]) % mod
                    r[i] += 1
                s[i] = T.index(beta)
            return T, r, s
        T, r, s = table_gens(gens, mod)
        n = len(gens)
        N = [ prod(r[:j]) for j in range(n) ]
        Z = lambda s: [ (floor(s/N[j]) % r[j]) for j in range(n)]
        return [Z(T.index(elt % mod)) for elt in elts]
    def extend_multiplicatively(an):
        for pp in prime_powers(len(an)-1):
            for k in range(1, (len(an) - 1)//pp + 1):
                if gcd(k, pp) == 1:
                    an[pp*k] = an[pp]*an[k]
    from sage.all import PolynomialRing, NumberField, ZZ
    R = PolynomialRing(QQ, "x")
    f = R(poly_data)
    K = NumberField(f, "a")
    betas = [K([c/ZZ(den) for c in num]) for num, den in basis_data]
    convert_elt_to_field = lambda elt: sum(c*beta for c, beta in zip(elt, betas))
    # convert aps to K elements
    primes = primes_first_n(len(aps_data))
    good_primes = [p for p in primes if not p.divides(level)]
    aps = map(convert_elt_to_field, aps_data)
    if not hecke_ring_character_values:
        # trivial character
        char_values = dict(zip(good_primes, [1]*len(good_primes)))
    else:
        gens = [elt[0] for elt in hecke_ring_character_values]
        gens_values = [convert_elt_to_field(elt[1]) for elt in hecke_ring_character_values]
        char_values = dict([(
            p,prod(g**k for g, k in zip(gens_values, elt)))
            for p, elt in zip(good_primes, discrete_log(good_primes, gens, level))
            ])
    an_list_bound = next_prime(primes[-1])
    an = [0]*an_list_bound
    an[1] = 1
    
    from sage.all import PowerSeriesRing
    PS = PowerSeriesRing(K, "q")
    for p, ap in zip(primes, aps):
        if p.divides(level):
            euler_factor = [1, -ap]
        else:
            euler_factor = [1, -ap, p**(weight - 1) * char_values[p]]
        k = RR(an_list_bound).log(p).floor() + 1
        foo = (1/PS(euler_factor)).padded_list(k)
        for i in range(1, k):
            an[p**i] = foo[i]
    extend_multiplicatively(an)
    return PS(an)
level  =  31
weight  =  5
poly_data  =  [1934136, 0, 49236, 0, 398, 0, 1]

# The entries in the following list give a basis for the
# coefficient ring in terms of a root of the defining polynomial above.
# Each line consists of the coefficients of the numerator, and a denominator.
basis_data   =  [\
[[1, 0, 0, 0, 0, 0], 1],
[[0, 1, 0, 0, 0, 0], 1],
[[0, 15588, 0, 272, 0, 1], 312],
[[16212, 0, 272, 0, 1, 0], 312],
[[-21282, 0, -311, 0, -1, 0], 78],
[[0, -101964, 0, -1516, 0, -5], 312]]

hecke_ring_character_values  =  [\
[3, [-1, 0, 0, 0, 0, 0]]]
aps_data  =  [\
[0, 0, 0, -1, 0, 0],
[0, 1, 0, 0, 0, 0],
[-1, 0, 0, -1, 1, 0],
[-19, 0, 0, -9, 0, 0],
[0, -2, 0, 0, 0, -1],
[0, -9, -1, 0, 0, -1],
[0, 13, 3, 0, 0, 2],
[-27, 0, 0, -11, -2, 0],
[0, 25, 6, 0, 0, -1],
[0, -7, -15, 0, 0, 1],
[-279, -9, 10, -142, 29, 1],
[0, 66, -20, 0, 0, 1],
[345, 0, 0, -85, -21, 0],
[0, 153, 28, 0, 0, -8],
[322, 0, 0, -238, -160, 0],
[0, -108, 36, 0, 0, 9],
[-469, 0, 0, 755, -152, 0],
[0, 51, -15, 0, 0, -9],
[2388, 0, 0, -470, 232, 0],
[-489, 0, 0, 839, -240, 0],
[0, 132, -106, 0, 0, -28],
[0, 129, -28, 0, 0, 47],
[0, -392, 108, 0, 0, -7],
[0, 473, 69, 0, 0, -38],
[4979, 0, 0, -2139, -285, 0],
[4593, 0, 0, -271, -219, 0],
[8379, 0, 0, 607, -32, 0],
[6299, 0, 0, 1103, -440, 0],
[4763, 0, 0, -981, 945, 0],
[1329, 0, 0, -2137, 615, 0],
[0, -1038, -160, 0, 0, -46],
[-5414, 0, 0, -2212, 554, 0],
[0, 1563, -111, 0, 0, 84],
[0, 1020, 102, 0, 0, -111],
[3652, 0, 0, 3242, 1748, 0],
[0, -459, -44, 0, 0, 181],
[-29259, 0, 0, 769, -1139, 0],
[12377, 0, 0, -2007, -1458, 0],
[0, -240, 750, 0, 0, 24],
[-16160, 0, 0, 2534, 68, 0],
[0, 2025, 36, 0, 0, -216],
[0, -141, 103, 0, 0, 169],
[-21505, 0, 0, 425, 310, 0],
[-16857, 0, 0, 499, 1777, 0],
[0, -2958, -126, 0, 0, 15],
[0, 2748, -542, 0, 0, -152],
[-23185, 0, 0, -6081, 660, 0],
[0, -798, 356, 0, 0, -46],
[12934, 0, 0, -3748, -2566, 0],
[0, -2208, 124, 0, 0, 211],
[-16183, 0, 0, 10643, -3905, 0],
[0, -1837, -576, 0, 0, 157],
[0, 2634, -84, 0, 0, 174],
[0, -5345, -6, 0, 0, -148],
[13667, 0, 0, -2053, -4595, 0],
[0, 2837, 354, 0, 0, -161],
[0, -32, 1470, 0, 0, 65],
[0, 1623, -1178, 0, 0, -149],
[0, -21, 849, 0, 0, -477],
[-26803, 0, 0, 15581, 4825, 0],
[-25486, 0, 0, -11208, -3522, 0],
[65020, 0, 0, -2050, -1408, 0],
[-44073, 0, 0, -10109, 2968, 0],
[79173, 0, 0, -8851, 4878, 0],
[0, -5139, -203, 0, 0, 454],
[-30039, 0, 0, 4913, -7059, 0],
[0, -10446, -124, 0, 0, -103],
[0, -1755, -2725, 0, 0, -718],
[0, 7153, 132, 0, 0, -10],
[21792, 0, 0, 16618, -4820, 0],
[0, 426, 456, 0, 0, 78],
[-25713, 0, 0, -1051, -9198, 0],
[0, 6150, 2402, 0, 0, -916],
[-27055, 0, 0, -8115, -8691, 0],
[74294, 0, 0, -22512, 8610, 0],
[0, 6034, 1842, 0, 0, -340],
[0, 2050, 2160, 0, 0, -325],
[75485, 0, 0, 11781, 5661, 0],
[0, -1887, -1599, 0, 0, -120],
[0, 12963, 315, 0, 0, 966],
[75957, 0, 0, 5657, -5190, 0],
[47889, 0, 0, 21025, -3887, 0],
[-154136, 0, 0, 9188, -6190, 0],
[0, -507, 863, 0, 0, -202],
[171099, 0, 0, 14185, -8594, 0],
[-32527, 0, 0, 22817, 802, 0],
[0, 9560, -174, 0, 0, -1322],
[0, -3090, -3090, 0, 0, 1326],
[0, 4490, 894, 0, 0, 1399],
[0, -15354, -520, 0, 0, 110],
[115923, 0, 0, -10861, 9276, 0],
[-121921, 0, 0, -5389, 2392, 0],
[0, 11379, -3566, 0, 0, 109],
[0, 21392, -576, 0, 0, 1183],
[0, 6216, 3034, 0, 0, 1897],
[6941, 0, 0, -45175, -10910, 0],
[0, 1631, -3789, 0, 0, -1385],
[112060, 0, 0, 2906, 8252, 0],
[0, -16659, 1986, 0, 0, -1038],
[-358605, 0, 0, -19721, 1537, 0],
[-222411, 0, 0, 42325, -13862, 0],
[0, -1672, -102, 0, 0, 2179],
[215133, 0, 0, -61447, -618, 0],
[0, -15544, -258, 0, 0, 436],
[0, -7251, -3294, 0, 0, -1626],
[182172, 0, 0, -58544, 370, 0],
[0, -9818, 2988, 0, 0, -1165],
[132875, 0, 0, -29083, 21511, 0],
[-471427, 0, 0, 10655, 2356, 0],
[0, -24357, 933, 0, 0, -312],
[54054, 0, 0, 60340, -2930, 0],
[0, -5940, 2406, 0, 0, -375],
[-194756, 0, 0, -17494, -17032, 0],
[0, -20139, 1088, 0, 0, -88],
[0, 17238, 2308, 0, 0, 1960],
[0, 39426, -2766, 0, 0, 948],
[0, 20454, 7390, 0, 0, -1487],
[0, -26812, -4836, 0, 0, -122],
[214900, 0, 0, 70130, -2032, 0],
[-435835, 0, 0, -16819, -1214, 0],
[-163945, 0, 0, 23619, 16077, 0],
[0, 7605, 9277, 0, 0, 1276],
[0, 994, 3816, 0, 0, -2437],
[281621, 0, 0, -15007, 11950, 0],
[187019, 0, 0, -139221, -5724, 0],
[215241, 0, 0, 96221, 5997, 0],
[0, 24882, 6666, 0, 0, 2109],
[0, -10085, -11958, 0, 0, -673],
[-288037, 0, 0, 81747, 7776, 0],
[-127557, 0, 0, 121675, -6215, 0],
[0, 19149, -7180, 0, 0, 1592],
[0, -7627, 2430, 0, 0, 835],
[-226989, 0, 0, -41171, 37246, 0],
[0, -20325, 9875, 0, 0, -433],
[0, -3582, -2274, 0, 0, 4302],
[254193, 0, 0, -81521, 36415, 0],
[0, 35685, -1737, 0, 0, 3771],
[0, 54987, 4750, 0, 0, 544],
[0, -9062, -1794, 0, 0, 2777],
[0, 44454, 9648, 0, 0, -4044],
[-61818, 0, 0, 179884, -22562, 0],
[0, -45237, -3531, 0, 0, -3615],
[0, -2679, -5940, 0, 0, 1461],
[0, -5793, 414, 0, 0, 456],
[0, 10494, 5952, 0, 0, -6567],
[-720194, 0, 0, -66766, -12100, 0],
[-268332, 0, 0, -74966, -23828, 0],
[390508, 0, 0, 10346, 11252, 0],
[0, 49356, -4174, 0, 0, -1177],
[0, 60929, -7374, 0, 0, -2003],
[626271, 0, 0, -187613, -28367, 0],
[0, 27502, 10308, 0, 0, 4346],
[0, -39432, -94, 0, 0, -2473],
[-405243, 0, 0, 78647, 4968, 0],
[12159, 0, 0, -33713, -7568, 0],
[0, 28321, -7596, 0, 0, -1],
[-228534, 0, 0, 56584, -21986, 0],
[0, 18304, 14616, 0, 0, -4096],
[-299904, 0, 0, -40346, 13384, 0],
[0, -65028, 4458, 0, 0, -303],
[0, -21708, -11928, 0, 0, -5031],
[0, -51765, 6813, 0, 0, 4380],
[0, -88902, -1774, 0, 0, -1450],
[234058, 0, 0, 58796, 70610, 0],
[791031, 0, 0, 43367, 6873, 0],
[0, 61132, 540, 0, 0, -2554],
[0, 36999, 17268, 0, 0, 4209],
[-214939, 0, 0, 235737, 18477, 0]]
